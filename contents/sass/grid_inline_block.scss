/*! GENERATED BY SASS. DO NOT EDIT THIS FILE.*/

@import '_variables';
@import '_mixins';

/*Adds a font whose space character has zero width to prevent white-space issues in inline block grid system*/
@font-face{ 
	font-family: 'NoSpace';
	src: url('../fonts/zerowidthspaces.eot');
	src: url('../fonts/zerowidthspaces.eot?#iefix') format('embedded-opentype'),
	     url('../fonts/zerowidthspaces.woff') format('woff'),
	     url('../fonts/zerowidthspaces.ttf') format('truetype'),
	     url('../fonts/zerowidthspaces.svg#NoSpace') format('svg');
}

.container {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 $gutter-width/2;
  @include border_box_sizing;

  @include breakpoint(med) {
    padding: 0 $gutter-width-med/2;
  }
  @include breakpoint(lg) {
    padding: 0 $gutter-width-lg/2;
  }
  @include breakpoint(xl) {
    padding: 0 $gutter-width-xl/2;
  }
}

.grid {
  @extend %clearfix;
  //word-spacing: -0.25em;
  text-align: left;
  font-family: 'NoSpace';
}
.grid img {
	max-width: 100%;
	height: auto;
}
//grid horizontal and vertical alignment options
.grid_align_left {
	text-align: left;
}
.grid_align_center {
	text-align: center;
}
.grid_align_right {
	text-align: right;
}
.grid_align_right .column,
.grid_align_center .column {
	text-align: left;
}
.grid_valign_top .column {
	vertical-align: top;
}
.grid_valign_middle .column {
	vertical-align: middle;
}
.grid_valign_bottom .column {
	vertical-align: bottom;
}

.grid .grid {
  //counteract padding from parent on nested column_sets
  margin: 0 (-$gutter-width/2);
  @include breakpoint(med) {
    margin: 0 (-$gutter-width-med/2);
  }
  @include breakpoint(lg) {
    margin: 0 (-$gutter-width-lg/2);
  }
  @include breakpoint(xl) {
    margin: 0 (-$gutter-width-xl/2);
  }
}

.column {
  @include border_box_sizing;
  position: relative;
  display: inline-block;
  width: 100%;
  padding: 0 $gutter-width/2;
  vertical-align: top;
  font-family: $primary_font; //revert to standard fonts from the NoSpace font declared on grid parent

  @include breakpoint(med) {
    padding: 0 $gutter-width-med/2;
  }
  @include breakpoint(lg) {
    padding: 0 $gutter-width-lg/2; 
  }
  @include breakpoint(xl) {
    padding: 0 $gutter-width-xl/2; 
  }
}

//full width columns limited by max-height media queries as there is no way to 'overwrite' them with min-width based media queries
//negative margin pulls the columns 'out' to negate the padding of .container element
//padding of gutter width allows the full width column to maintain intended full outer gutter
//full width column does not work at xl breakpoint because 100vw originates relative to a container element
@media (max-width: 1279px) {
	.column.lg_full_width {
		width: 100%;
		width: calc(100% + #{$gutter-width-lg});
		width: 100vw; //using vw will trigger horizontal scrollbar in desktop Chrome
		margin-left: -($gutter-width-lg/2);
		margin-right: -($gutter-width-lg/2);
		padding: 0 $gutter-width-lg;
	}
}
@media (max-width: 1023px) {
	.column.med_full_width,
	.column.lg_full_width {
		width: 100%;
		width: calc(100% + #{$gutter-width-med});
		width: 100vw; //using vw will trigger horizontal scrollbar in desktop Chrome
		margin-left: -($gutter-width-med/2);
		margin-right: -($gutter-width-med/2);
		padding: 0 $gutter-width-med;
	}
}
@media (max-width: 767px) {
	.column.sm_full_width,
	.column.med_full_width,
	.column.lg_full_width {
		width: 100%;
		width: calc(100% + #{$gutter-width});
		width: 100vw; //using vw will trigger horizontal scrollbar in desktop Chrome
		margin-left: -($gutter-width/2);
		margin-right: -($gutter-width/2);
		padding: 0 $gutter-width;
	}
}
@media (max-width: 480px) {
	.column.full_width,
	.column.sm_full_width,
	.column.med_full_width,
	.column.lg_full_width {
		width: 100%;
		width: calc(100% + #{$gutter-width});
		width: 100vw; //using vw will trigger horizontal scrollbar in desktop Chrome
		margin-left: -($gutter-width/2);
		margin-right: -($gutter-width/2);
		padding: 0 $gutter-width;
	}
}

// width calculations subtract .01px from each calculation to prevent browser rounding up and over 100% 

//Create
//Columns--------------------------------------------
@for $i from 1 through $grid-columns {
    .size#{$i}of#{$grid-columns} {
      width: columns($i);
      width: calc(100%*#{$i}/#{$grid-columns} - .01px);
    }
}

//Prefix and suffix - used to add an empty column of space before/after a column----------------------------
//loop from zero to add a 0of12 option to reset prefixes and suffixes defined at lower breakpoints
@for $i from 0 through $grid-columns {
    .prefix#{$i}of#{$grid-columns} {
      margin-left: columns($i);
      margin-left: calc(100%*#{$i}/#{$grid-columns});
    }

    .suffix#{$i}of#{$grid-columns} {
      margin-right: columns($i);
      margin-right: calc(100%*#{$i}/#{$grid-columns});
    }
}

//Push and pull - let you manipulate column order----------------------------
//loop from zero to add a 0of12 option to reset pushes and pulls defined at lower breakpoints
@for $i from 0 through $grid-columns {
    .push#{$i}of#{$grid-columns} {
      left: columns($i);
      left: calc(100%*#{$i}/#{$grid-columns});
    }

    .pull#{$i}of#{$grid-columns} {
      right: columns($i);
      right: calc(100%*#{$i}/#{$grid-columns});
    }
}

//Remove padding from mobile size up; options to remove and restore padding
//throughout the breakpoints are in the loops below
.column.clear_padding,
.column.clear_padding_left {
  padding-left: 0;
}
.column.clear_padding,
.column.clear_padding_right {
  padding-right: 0;
}

//--------------------------
@each $breakpoint in $breakpoints {
  $prefix: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);

  @media (min-width: $size) {
	//Columns--------------------------------------------
    @for $i from 1 through $grid-columns {
        .#{$prefix}_size#{$i}of#{$grid-columns} {
          width: columns($i);
          width: calc(100%*#{$i}/#{$grid-columns} - .01px);
        }
    }

    //Prefix and suffix----------------------------
    @for $i from 0 through $grid-columns {
        .#{$prefix}_prefix#{$i}of#{$grid-columns} {
          margin-left: columns($i);
          margin-left: calc(100%*#{$i}/#{$grid-columns});
        }

        .#{$prefix}_suffix#{$i}of#{$grid-columns} {
          margin-right: columns($i);
          margin-right: calc(100%*#{$i}/#{$grid-columns});
        }
    }

    //Push and pull----------------------------
    @for $i from 0 through $grid-columns {
        .#{$prefix}_push#{$i}of#{$grid-columns} {
          left: columns($i);
          left: calc(100%*#{$i}/#{$grid-columns});
        }

        .#{$prefix}_pull#{$i}of#{$grid-columns} {
          right: columns($i);
          right: calc(100%*#{$i}/#{$grid-columns});
        }
    }

    //Options for removing and restoring padding on columns throughout the breakpoints
    .column.#{$prefix}_clear_padding,
    .column.#{$prefix}_clear_padding_left {
        padding-left: 0;
    }
    .column.#{$prefix}_clear_padding,
    .column.#{$prefix}_clear_padding_right {
        padding-right: 0;
    }
    .column.#{$prefix}_restore_padding,
    .column.#{$prefix}_restore_padding_left {
        padding-left: getGutterWidth(#{$prefix})/2;
    }
    .column.#{$prefix}_restore_padding,
    .column.#{$prefix}_restore_padding_right {
        padding-right: getGutterWidth(#{$prefix})/2;
    }
    
  }

  //restoring padding requires re-stating all previous breakpoints to override the 'mobile first' cleared padding
  @include breakpoint(med) {
      .column.sm_restore_padding, 
      .column.sm_restore_padding_left {
          padding-left: getGutterWidth(med)/2;
      }
      .column.sm_restore_padding, 
      .column.sm_restore_padding_right {
          padding-right: getGutterWidth(med)/2;
      }
  }
  @include breakpoint(lg) {
      .column.sm_restore_padding,
      .column.sm_restore_padding_left,
      .column.med_restore_padding,  
      .column.med_restore_padding_left {
          padding-left: getGutterWidth(lg)/2;
      }
      .column.sm_restore_padding, 
      .column.sm_restore_padding_right,
      .column.med_restore_padding, 
      .column.med_restore_padding_right {
          padding-right: getGutterWidth(lg)/2;
      }
  }
  @include breakpoint(xl) {
      .column.sm_restore_padding,
      .column.sm_restore_padding_left,
      .column.med_restore_padding,  
      .column.med_restore_padding_left,
      .column.lg_restore_padding,  
      .column.lg_restore_padding_left {
          padding-left: getGutterWidth(xl)/2;
      }
      .column.sm_restore_padding, 
      .column.sm_restore_padding_right,
      .column.med_restore_padding, 
      .column.med_restore_padding_right,
      .column.lg_restore_padding, 
      .column.lg_restore_padding_right {
          padding-right: getGutterWidth(xl)/2;
      }
  }
}
